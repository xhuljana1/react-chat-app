{"version":3,"sources":["logo.svg","config.js","lib/chat.js","components/Login.js","components/Groupchat.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","config","appId","apiKey","GUID","CCManager","CometChat","init","uid","text","msgType","TextMessage","MESSAGE_TYPE","TEXT","RECEIVER_TYPE","USER","GROUP","getLoggedinUser","UID","console","log","this","login","callback","limit","arguments","length","undefined","messagesRequest","MessagesRequestBuilder","setGUID","setLimit","build","fetchPrevious","message","textMessage","getTextMessage","sendMessage","joinGroup","GROUP_TYPE","PUBLIC","addMessageListener","LISTENER_KEY_MESSAGE","MessageListener","onTextMessageReceived","LISTENER_KEY_GROUP","Login","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","e","state","username","preventDefault","toggleIsSubmitting","chat","then","user","setState","isAuthenticated","catch","error","errorMessage","prevState","isSubmitting","handleInput","target","value","react_default","a","createElement","Redirect","to","pathname","className","onChange","type","src","spinner","alt","disabled","Component","Groupchat","sendGroupMessage","messageText","code","response","scrollToBottom","document","getElementById","scrollTop","scrollHeight","handleSubmit","event","reset","handleChange","getUser","_ref","messageListener","data","concat","groupMessage","toConsumableArray","receiverID","_this2","id","map","key","sender","placeholder","React","App","Switch","exact","from","Route","path","component","ReactDOM","render","BrowserRouter","src_App_0"],"mappings":"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","file":"static/js/main.eb11084c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default {\r\n    appId: \"3167bd9cb0f2d0\", //Enter your App ID\r\n    apiKey: \"13a262935b4d394f0d1d12f6039c1cbc0f5322e2\", //Enter your API KEY\r\n    GUID: \"testgroup\", // Enter your group UID\r\n  };","import { CometChat } from \"@cometchat-pro/chat\" \r\nimport config from \"../config\"\r\n\r\n\r\nexport default class CCManager {\r\n    static LISTENER_KEY_MESSAGE = \"msglistener\";\r\n    static appId = config.appId;\r\n    static apiKey = config.apiKey;\r\n    static LISTENER_KEY_GROUP = \"grouplistener\";\r\n\r\n    static init() {\r\n      return CometChat.init(CCManager.appId);\r\n    }\r\n\r\n    static getTextMessage(uid, text, msgType) {\r\n        if (msgType === \"user\") {\r\n          return new CometChat.TextMessage(\r\n            uid,\r\n            text,\r\n            CometChat.MESSAGE_TYPE.TEXT,\r\n            CometChat.RECEIVER_TYPE.USER\r\n          );\r\n        } else {\r\n          return new CometChat.TextMessage(\r\n            uid,\r\n            text,\r\n            CometChat.MESSAGE_TYPE.TEXT,\r\n            CometChat.RECEIVER_TYPE.GROUP\r\n          );\r\n        }\r\n      }\r\n\r\n      static getLoggedinUser() {\r\n        return CometChat.getLoggedinUser();\r\n      }\r\n\r\n      static login(UID) {\r\n        console.log(this.apiKey)\r\n        return CometChat.login(UID, this.apiKey);\r\n      }\r\n\r\n      static getGroupMessages(GUID, callback, limit = 30) {\r\n        const messagesRequest = new CometChat.MessagesRequestBuilder()\r\n          .setGUID(GUID)\r\n          .setLimit(limit)\r\n          .build();\r\n        callback();\r\n        return messagesRequest.fetchPrevious();\r\n      }\r\n\r\n\r\n      static sendGroupMessage(UID, message) {\r\n        const textMessage = this.getTextMessage(UID, message, \"group\");\r\n        return CometChat.sendMessage(textMessage);\r\n      }\r\n\r\n\r\n      static joinGroup(GUID) {\r\n        return CometChat.joinGroup(GUID, CometChat.GROUP_TYPE.PUBLIC, \"\");\r\n      }\r\n\r\n      static addMessageListener(callback) {\r\n        CometChat.addMessageListener(\r\n          this.LISTENER_KEY_MESSAGE,\r\n          new CometChat.MessageListener({\r\n            onTextMessageReceived: textMessage => {\r\n              callback(textMessage);\r\n            }\r\n          })\r\n        );\r\n      }\r\n}","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport chat from \"../lib/chat\";\r\nimport spinner from \"../logo.svg\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          username: \"\",\r\n          isAuthenticated: false,\r\n          user: null,\r\n          isSubmitting: false,\r\n          errorMessage: \"\"\r\n        };\r\n      }\r\n\r\n    onSubmit = e => {\r\n        // check if username is filled, then proceed to login\r\n        if (this.state.username !== \"\") {\r\n            e.preventDefault()\r\n            this.login()\r\n        }\r\n    }\r\n\r\n    login = () => {\r\n        \r\n        this.toggleIsSubmitting();\r\n        chat.login(this.state.username).then(\r\n            user => {\r\n                this.setState({\r\n                    user,\r\n                    isAuthenticated: true\r\n                })\r\n                console.log(this.state.username)\r\n            }).catch(error => {\r\n                this.setState({\r\n                    errorMessage: \"Please enter a valid username\"\r\n                })\r\n                this.toggleIsSubmitting()\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    toggleIsSubmitting = () => {\r\n        this.setState(prevState => ({\r\n            isSubmitting: !prevState.isSubmitting\r\n        }))\r\n    }\r\n\r\n    handleInput = e => {\r\n        this.setState({ username: e.target.value })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isAuthenticated) {\r\n            return (\r\n                <Redirect\r\n                    to={{\r\n                        pathname: \"/chat\",\r\n                        state: { user: this.state.user }\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>COMETCHAT</h1>\r\n                <p>Create an account through your CometChat dashboard or login with one of our test users, superhero1, superhero2, etc.</p>\r\n                <form onSubmit={this.onSubmit} className=\"form\" >\r\n                    <input onChange={this.handleInput} type=\"text\" />\r\n                    <span className=\"error\">{this.state.errorMessage}</span>\r\n                    {this.state.isSubmitting ? (\r\n                        <img src={spinner} alt=\"Spinner component\" className=\"App-logo\" />\r\n                    ) : (\r\n                            <input\r\n                                type=\"submit\"\r\n                                disabled={this.state.username === \"\"}\r\n                                value=\"LOGIN\"\r\n                            />\r\n                        )}\r\n                </form>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport { Login }","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport chat from \"../lib/chat\";\r\nimport config from \"../config\";\r\nclass Groupchat extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            receiverID: \"\",\r\n            messageText: null,\r\n            groupMessage: [],\r\n            user: {},\r\n            isAuthenticated: true\r\n        };\r\n        this.GUID = config.GUID;\r\n    }\r\n    sendMessage = () => {\r\n        chat.sendGroupMessage(this.GUID, this.state.messageText).then(\r\n            message => {\r\n                console.log(\"Message sent successfully:\", message);\r\n                this.setState({ messageText: null });\r\n            },\r\n            error => {\r\n                if (error.code === \"ERR_NOT_A_MEMBER\") {\r\n                    chat.joinGroup(this.GUID).then(response => {\r\n                        this.sendMessage();\r\n                    });\r\n                }\r\n            }\r\n        );\r\n    };\r\n    scrollToBottom = () => {\r\n        const chat = document.getElementById(\"chatList\");\r\n        chat.scrollTop = chat.scrollHeight;\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        this.sendMessage();\r\n        event.target.reset();\r\n    };\r\n    handleChange = event => {\r\n        this.setState({ messageText: event.target.value });\r\n    };\r\n    getUser = () => {\r\n        chat\r\n            .getLoggedinUser()\r\n            .then(user => {\r\n                console.log(\"user details:\", { user });\r\n                this.setState({ user });\r\n            })\r\n            .catch(({ error }) => {\r\n                if (error.code === \"USER_NOT_LOGED_IN\") {\r\n                    this.setState({\r\n                        isAuthenticated: false\r\n                    });\r\n                }\r\n            });\r\n    };\r\n    messageListener = () => {\r\n        chat.addMessageListener((data, error) => {\r\n            if (error) return console.log(`error: ${error}`);\r\n            this.setState(\r\n                prevState => ({\r\n                    groupMessage: [...prevState.groupMessage, data]\r\n                }),\r\n                () => {\r\n                    this.scrollToBottom();\r\n                }\r\n            );\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        this.getUser();\r\n        this.messageListener();\r\n        // chat.joinGroup(this.GUID)\r\n    }\r\n    render() {\r\n        const { isAuthenticated } = this.state;\r\n        if (!isAuthenticated) {\r\n            return <Redirect to=\"/\" />;\r\n        }\r\n        return (\r\n            <div className=\"chatWindow\">\r\n                <ul className=\"chat\" id=\"chatList\">\r\n                    {this.state.groupMessage.map(data => (\r\n                        <div key={data.id}>\r\n                            {this.state.user.uid === data.sender.uid ? (\r\n                                <li className=\"self\">\r\n                                    <div className=\"msg\">\r\n                                        <p>{data.sender.uid}</p>\r\n                                        <div className=\"message\"> {data.data.text}</div>\r\n                                    </div>\r\n                                </li>\r\n                            ) : (\r\n                                    <li className=\"other\">\r\n                                        <div className=\"msg\">\r\n                                            <p>{data.sender.uid}</p>\r\n                                            <div className=\"message\"> {data.data.text} </div>\r\n                                        </div>\r\n                                    </li>\r\n                                )}\r\n                        </div>\r\n                    ))}\r\n                </ul>\r\n                <div className=\"chatInputWrapper\">\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <input\r\n                            className=\"textarea input\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your message...\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Groupchat }","import React, {Component} from 'react';\nimport { Route, Switch, Redirect} from 'react-router-dom'\nimport './App.css';\nimport chat from './lib/chat';\n\nimport { Login, Groupchat } from \"./components\"\n\n\nclass App extends Component{\n  constructor(props){\n  super(props)\n  chat.init()\n  }\n  render(){\n    return(\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/login\"/>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/chat\" component={Groupchat}/>\n      </Switch>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {  BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<Router>\n<App />\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}